/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Clases.Movie;
import Clases.MyItemSimilarity;
import Clases.SimilitudPeliculas;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Carlos
 */
public class Busqueda extends javax.swing.JFrame {

    /**
     * Creates new form Busqueda
     */
    ArrayList<String> peliculasSeleccionadas;
    DefaultTableModel model;
    DefaultTableModel modelReco;
    public ArrayList<Movie> listadoDePeliculas;
    
    public Busqueda() throws FileNotFoundException {
        initComponents();
        this.peliculasSeleccionadas = new ArrayList<>();
        this.listadoDePeliculas = new ArrayList<>();
        String [] columnas = {"Title","IMDB Score","Duration","Genres","Director","Actor 1","Actor 2","Actor 3"};
        model = new DefaultTableModel(null,columnas);
        modelReco = new DefaultTableModel(null,columnas);
        jTable1.setModel(model);
        jTable2.setModel(modelReco);
        LeturaArchivo();
        CrerUsuarios();
    }

    private void CrerUsuarios(){
        try{
            File usuarios = new File("src/usuariosvarios.txt");
            if (!usuarios.exists()) {
                BufferedWriter bw = new BufferedWriter(new FileWriter(usuarios));
                bw.close();
            }
        }catch(Exception e){
        }
    }
    
    private void LeturaArchivo(){
        try{
            String rutaArchivo = "src/movie_metadata 1.csv";
            String linea = "";
            File f = new File(rutaArchivo);
            FileReader frp = new FileReader(f);
            BufferedReader brp = new BufferedReader(frp);
            int cod = 1;
            while((linea=brp.readLine())!= null){
                String aux = linea;
                String[] dato = new String[9];
                for (int i = 0; i < 9; i++) {
                    if (i<=7) {
                        dato[i] = aux.substring(0, aux.indexOf(";"));
                        aux = aux.substring(aux.indexOf(";")+1);
                    }else{
                        dato[i] = aux;
                    }
                }
                Movie nuevaPelicula = new Movie();
                nuevaPelicula.createMovie(dato,cod);
                cod++;
                listadoDePeliculas.add(nuevaPelicula);
            }
            brp.close();
            frp.close();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Bienvenido!");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Titulo", "Genero", "Director" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jLabel3.setText("Recomendaciones:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addContainerGap())
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(968, 968, 968))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1049, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 48, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        try
        {
            int a = model.getRowCount() - 1;
            if (a > 0) {
                    for (int i = a; i >= 0; i--) {
                    model.removeRow(i);
                }
            }
            
            switch(jComboBox1.getSelectedIndex()){
                case 0: //Titulo
                    for (Movie pelicula : listadoDePeliculas) {
                        if (pelicula.getTitle().toLowerCase().contains(jTextField1.getText().toLowerCase())) {
                            model.addRow(pelicula.getMovie());
                        }
                    }
                    break;
                case 1: //Genero
                    for (Movie pelicula : listadoDePeliculas) {
                        if (pelicula.getGenre().toLowerCase().contains(jTextField1.getText().toLowerCase())) {
                            model.addRow(pelicula.getMovie());
                        }
                    }
                    break;
                case 2: //Director
                    for (Movie pelicula : listadoDePeliculas) {
                        if (pelicula.getDirector().toLowerCase().contains(jTextField1.getText().toLowerCase())) {
                            model.addRow(pelicula.getMovie());
                        }
                    }
                    break;
            }
            jTextField1.setText(null);
            
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //CUANDO EL USUARIO SELECCIONA UNA PELICULA.
        int opcion = jTable1.rowAtPoint(evt.getPoint());
        peliculasSeleccionadas.add(jTable1.getValueAt(opcion, 0).toString());
        JOptionPane.showMessageDialog(null, "Se ha añadido:"+jTable1.getValueAt(opcion, 0));
        EscribirEnUsuarios();
        CargarRecomendaciones();
    }//GEN-LAST:event_jTable1MouseClicked

    private void CargarRecomendaciones(){
        MyItemSimilarity mis = new MyItemSimilarity();
            
        ArrayList<Movie> Auxiliar = new ArrayList<>();
        ArrayList<SimilitudPeliculas> SP = new ArrayList<>();

        for (String peliculasSeleccionada : peliculasSeleccionadas) {
            Boolean existe = false;
            for (Movie listadoDePelicula : listadoDePeliculas) {
                if (listadoDePelicula.getTitle().equals(peliculasSeleccionada) && existe == false) {
                    existe = true;
                    Auxiliar.add(listadoDePelicula);
                }
            }
        }
        for (Movie pelis : Auxiliar) {
                for (Movie listadoDePelicula : listadoDePeliculas) {
                    double similitud = mis.itemSimilarity(pelis, listadoDePelicula);
                    if (SP.isEmpty()) {
                        SP.add(new SimilitudPeliculas(similitud, listadoDePelicula));
                    }
                    else{
                    Boolean agregar = true;
                    for (SimilitudPeliculas SP1 : SP) {
                        if (SP1.getSimilitud() == similitud) {
                            SP1.agregarPeli(listadoDePelicula);
                            agregar = false;
                            break;
                        }
                    }
                    if (agregar) {
                        SP.add(new SimilitudPeliculas(similitud, listadoDePelicula));
                    }
                }
            }
        }
        
        Collections.sort(SP);
        SimilitudPeliculas a = SP.get(SP.size()-1);
        if (a.getPeliculas() >= 9) {
            
        }else{
            
        }
    }
    
    private void EscribirEnUsuarios(){
        try{
            File f = new File("src/usuariosvarios.txt");
            String linea = "";
            FileReader frp = new FileReader(f);
            BufferedReader brp = new BufferedReader(frp);
            ArrayList<String> usuarios = new ArrayList<>();
            int lineas = 0;
            while((linea=brp.readLine())!= null){
                usuarios.add(linea);
                lineas++;
            }
            if (lineas == 0) {
                //Primer usuario
                FileWriter TextOut = new FileWriter(f, false);
                TextOut.write("1:" + peliculasSeleccionadas.toString()+ "\r\n");
                TextOut.close();
            }else{
                if (peliculasSeleccionadas.size() > 1) {
                    String numUsuario = usuarios.get(lineas-1).substring(0,usuarios.get(lineas-1).indexOf(":"));
                    String nuevaLinea = numUsuario + ":" + peliculasSeleccionadas.toString();
                    usuarios.set(lineas-1, nuevaLinea);
                    FileWriter TextOut = new FileWriter(f, false);
                    for (int i = 0; i < usuarios.size(); i++) {
                        TextOut.write(usuarios.get(i)+ "\r\n");
                    }
                    TextOut.close();
                }else{
                    String numUsuario = usuarios.get(lineas-1).substring(0,usuarios.get(lineas-1).indexOf(":"));
                    int numUSU = Integer.valueOf(numUsuario);
                    numUSU++ ;
                    numUsuario = String.valueOf(numUSU);
                    String nueba = numUsuario + ":" + peliculasSeleccionadas.toString();
                    usuarios.add(nueba);
                    FileWriter TextOut = new FileWriter(f, false);
                    for (int i = 0; i < usuarios.size(); i++) {
                        TextOut.write(usuarios.get(i)+ "\r\n");
                    }
                    TextOut.close();
                }
            }
            
            
            
            
        }catch(Exception e){JOptionPane.showMessageDialog(null, e.toString());}
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Busqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Busqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Busqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Busqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Busqueda().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Busqueda.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
